/*
  C#113-2 (비접촉전류센서(SCT013-030)이 연결된 사물인터넷 보드용 코드)
  비접촉 전류센서를 A0에 연결하고 측정한값을 MQTT를 이용해서 publish하라!
 */

#include <ESP8266WiFi.h>
#include <PubSubClient.h>
#include "EmonLib.h"                   // Include Emon Library
EnergyMonitor emon1;
// Update these with values suitable for your network.

const char* ssid = "~~~~~";
const char* password = "~~~~~";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;
double total_power = 0;
unsigned long t1= 0;
unsigned long previousMillis = 0;
int count=0;
void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  // Switch on the LED if an 1 was received as first character
  if ((char)payload[0] == '1') {
    digitalWrite(BUILTIN_LED, LOW);   // Turn the LED on (Note that LOW is the voltage level
    // but actually the LED is on; this is because
    // it is active low on the ESP-01)
  } else {
    digitalWrite(BUILTIN_LED, HIGH);  // Turn the LED off by making the voltage HIGH
  }

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("outTopic", "hello world");
      // ... and resubscribe
      //client.subscribe("inTopic");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(BUILTIN_LED, OUTPUT);     // Initialize the BUILTIN_LED pin as an output
  Serial.begin(115200);
  emon1.current(0, 18);             // Current: input pin, calibration.
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);

  //초기 노이즈가 발생하기 때문에 10개 샘플정도를 허공에 날려버린다!
  for(int i = 0;i<10;i++){
    emon1.calcIrms(1480);
  }
  t1 = millis();
  
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long currentMillis = millis();
  if (currentMillis - previousMillis >= 1000) {
    previousMillis = currentMillis;

    double Irms = emon1.calcIrms(1480);  // Calculate Irms only
    if(Irms < 0.02) Irms = 0;
  
    unsigned int t2 = millis();
    int nocktime = t2 - t1;
    t1 = t2;
    double power = Irms*220.0;
    total_power += power * nocktime/3600; 
    Serial.print(nocktime); //샘플간격의 시간
    Serial.print(" ");
    Serial.print(total_power/1000,4); //누적전력량
    Serial.print(" ");
    Serial.print(power,4); //순간전력
    Serial.print(" ");
    Serial.println(Irms,4); //순간전류

    //1초에 4개의 데이터set을 한방에 보내는것보다
    //4개의 데이터를 250ms로 나눠서 1개씩 전송하는 전략을 택했다!
    //if(count == 0){
      String data = String(nocktime);
      char tsample[data.length()+1];
      data.toCharArray(tsample,data.length()+1);
      client.publish("nockanda/tsample", tsample);
    //}else if(count == 1){
      data = String(total_power/1000,4);
      char d2[data.length()+1];
      data.toCharArray(d2,data.length()+1);
      client.publish("nockanda/wh", d2);
    //}else if(count == 2){
     data = String(power,4);
     char d3[data.length()+1];
     data.toCharArray(d3,data.length()+1);
     client.publish("nockanda/w", d3);
    //}else if(count == 3){
     data = String(Irms,4);
     char d4[data.length()+1];
     data.toCharArray(d4,data.length()+1);
     client.publish("nockanda/i", d4);
    //}
    //count++;
    //if(count > 3) count = 0;
  }

  
  
}