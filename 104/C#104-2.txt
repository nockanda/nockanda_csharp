/*
 C#104-2 LED 4개를 D3, D4, D5, D6에 연결해라!
 C#윈폼을 MQTT클라이언트로 세팅하고 개별적으로 제어할 수 있는 환경을 구성해서,
 개별적으로 제어해보라!
*/

#include <ESP8266WiFi.h>
#include <PubSubClient.h>

#define LED1 D3
#define LED2 D4
#define LED3 D5
#define LED4 D6
// Update these with values suitable for your network.

const char* ssid = "~~~~";
const char* password = "~~~~";
const char* mqtt_server = "broker.mqtt-dashboard.com";

WiFiClient espClient;
PubSubClient client(espClient);
unsigned long lastMsg = 0;
#define MSG_BUFFER_SIZE  (50)
char msg[MSG_BUFFER_SIZE];
int value = 0;

void setup_wifi() {

  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
  }
  Serial.println();

  String topic2 = topic;

  if(topic2 == "nockanda/room1"){
    //녹칸다네 집의 1번방의 조명이구나..
    if((char)payload[0] == '0'){
      //LED를 끄면 되겠네..
      digitalWrite(LED1,LOW);
    }else{
      //LED를 켜면 되겠네..
      digitalWrite(LED1,HIGH);
    }
  }else if(topic2 == "nockanda/room2"){
    //녹칸다네 집의 2번방의 조명이구나..
    if((char)payload[0] == '0'){
      //LED를 끄면 되겠네..
      digitalWrite(LED2,LOW);
    }else{
      //LED를 켜면 되겠네..
      digitalWrite(LED2,HIGH);
    }
  }else if(topic2 == "nockanda/room3"){
    //녹칸다네 집의 3번방의 조명이구나..
    if((char)payload[0] == '0'){
      //LED를 끄면 되겠네..
      digitalWrite(LED3,LOW);
    }else{
      //LED를 켜면 되겠네..
      digitalWrite(LED3,HIGH);
    }
  }else if(topic2 == "nockanda/room4"){
    //녹칸다네 집의 4번방의 조명이구나..
    if((char)payload[0] == '0'){
      //LED를 끄면 되겠네..
      digitalWrite(LED4,LOW);
    }else{
      //LED를 켜면 되겠네..
      digitalWrite(LED4,HIGH);
    }
  }else if(topic2 == "nockanda/roomall"){
    //전부다 껏다가 켰다가 해보자!
    if((char)payload[0] == '0'){
      //LED를 끄면 되겠네..
      digitalWrite(LED1,LOW);
      digitalWrite(LED2,LOW);
      digitalWrite(LED3,LOW);
      digitalWrite(LED4,LOW);
      client.publish("nockanda/room1", "0");
      client.publish("nockanda/room2", "0");
      client.publish("nockanda/room3", "0");
      client.publish("nockanda/room4", "0");
    }else{
      //LED를 켜면 되겠네..
      digitalWrite(LED1,HIGH);
      digitalWrite(LED2,HIGH);
      digitalWrite(LED3,HIGH);
      digitalWrite(LED4,HIGH);
      client.publish("nockanda/room1", "1");
      client.publish("nockanda/room2", "1");
      client.publish("nockanda/room3", "1");
      client.publish("nockanda/room4", "1");
    }
  }
}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
    // Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    // Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected");
      // Once connected, publish an announcement...
      client.publish("outNOCK1", "hello world");
      // ... and resubscribe
      client.subscribe("nockanda/room1");
      client.subscribe("nockanda/room2");
      client.subscribe("nockanda/room3");
      client.subscribe("nockanda/room4");
      client.subscribe("nockanda/roomall");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

void setup() {
  pinMode(LED1,OUTPUT);
  pinMode(LED2,OUTPUT);
  pinMode(LED3,OUTPUT);
  pinMode(LED4,OUTPUT);
  Serial.begin(115200);
  setup_wifi();
  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
}

void loop() {

  if (!client.connected()) {
    reconnect();
  }
  client.loop();

  unsigned long now = millis();
  if (now - lastMsg > 2000) {
    lastMsg = now;
    ++value;
    snprintf (msg, MSG_BUFFER_SIZE, "hello world #%ld", value);
    Serial.print("Publish message: ");
    Serial.println(msg);
    client.publish("outNOCK1", msg);
  }
}